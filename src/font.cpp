// Bikemaster - A bike statistics solution
// (c) Kristian Klomsten Skordal 2018 <kristian.skordal@wafflemail.net>
// Report bugs and issues on <https://github.com/skordal/bikemaster/issues>

#include "font.h"

static const uint8_t unknownGlyphData[] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};
static const Glyph unknownGlyph(10, 20, 0, unknownGlyphData);

Font & Font::getDefault()
{
	static Font defaultFont(glyphs);
	return defaultFont;
}

Font::Font(const LUT<wchar_t, const Glyph *> & glyphTable)
	: glyphTable(glyphTable)
{

}

unsigned int Font::getWidth(const wchar_t * text) const
{
	unsigned int retval = 0;
	for(unsigned int i = 0; text[i] != 0; ++i)
	{
		if(text[i] == ' ')
		{
			retval += WHITESPACE_WIDTH;
			continue;
		}

		const Glyph * current = &unknownGlyph;
		glyphTable.get(text[i], &current);

		retval += current->getWidth() + CHARACTER_SPACING;
	}

	return retval;
}

void Font::render(Framebuffer & fb, const Point & pos, const wchar_t * text, const Color & color) const
{
	unsigned int offsetX = 0;

	for(unsigned int i = 0; text[i] != 0; ++i)
	{
		if(text[i] == ' ')
		{
			offsetX += WHITESPACE_WIDTH;
			continue;
		}

		const Glyph * current = &unknownGlyph;
		glyphTable.get(text[i], &current);

		current->render(fb, pos.offset(offsetX, 0), color);
		offsetX += current->getWidth() + CHARACTER_SPACING;
	}
}
